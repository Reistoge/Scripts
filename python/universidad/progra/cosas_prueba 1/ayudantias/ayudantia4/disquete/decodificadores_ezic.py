import base64

SIMBOLS, LETTERS = None, None
def desencriptar(argument): pass
def ezic(argument): pass

for i in [
"ZGVmIGRlc2VuY3JpcHRhcihhcmd1bWVudCk6CglmaW5hbF9tZXNzYWdlID0gW10KCWxvb3AgPSAwCgl3aGlsZSBsb29wIDwgbGVuKGFyZ3VtZW50KToKCQl3b3JkID0gYXJndW1lbnRbbG9vcF0KCQlpZiB3b3JkID09ICdcXCc6CgkJCXRyeToKCQkJCW5leHRfd29yZCA9IGFyZ3VtZW50W2xvb3AgKyAxXQoJCQlleGNlcHQgSW5kZXhFcnJvcjoKCQkJCWZpbmFsX21lc3NhZ2UuYXBwZW5kKCdgJykKCQkJCWxvb3AgKz0gMgoJCQkJY29udGludWUKCQkJaWYgbmV4dF93b3JkIGluIFNJTUJPTFM6CgkJCQl2YWx1ZV9pbmRleCA9IFNJTUJPTFMuaW5kZXgobmV4dF93b3JkKQoJCQkJZmluYWxfbWVzc2FnZS5hcHBlbmQoTEVUVEVSU1t2YWx1ZV9pbmRleF0udXBwZXIoKSkKCQkJCWxvb3AgKz0gMgoJCQllbGlmIG5leHRfd29yZCA9PSAnXFwnOgoJCQkJZmluYWxfbWVzc2FnZS5hcHBlbmQoJ1xcJykKCQkJCWxvb3AgKz0gMgoJCQllbGlmIG5leHRfd29yZCA9PSAnfic6CgkJCQlvdmVybmV4dF93b3JkID0gYXJndW1lbnRbbG9vcCArIDJdCgkJCQlmaW5hbF9tZXNzYWdlLmFwcGVuZChvdmVybmV4dF93b3JkKQoJCQkJbG9vcCArPSAzCgkJCWVsc2U6CgkJCQlmaW5hbF9tZXNzYWdlLmFwcGVuZCgnYCcpCgkJCQlsb29wICs9IDIKCQllbGlmIHdvcmQgPT0gJyAnOgoJCQlmaW5hbF9tZXNzYWdlLmFwcGVuZCgnICcpCgkJCWxvb3AgKz0gMQoJCWVsaWYgd29yZCBpbiBTSU1CT0xTOgoJCQl2YWx1ZV9pbmRleCA9IFNJTUJPTFMuaW5kZXgod29yZCkKCQkJZmluYWxfbWVzc2FnZS5hcHBlbmQoTEVUVEVSU1t2YWx1ZV9pbmRleF0pCgkJCWxvb3AgKz0gMQoJCWVsc2U6CgkJCWZpbmFsX21lc3NhZ2UuYXBwZW5kKHdvcmQpCgkJCWxvb3AgKz0gMQoJZmluYWxfbWVzc2FnZSA9IGZpbmFsX21lc3NhZ2VbOjotMV0KCWFyZ3VtZW50ID0gJycuam9pbihzdHIoaSkgZm9yIGkgaW4gZmluYWxfbWVzc2FnZSkKCXJldHVybiBhcmd1bWVudA==",
"U0lNQk9MUz1bJ0AnLCc7JywnfCcsJyQnLHUnw7cnLCclJywnXicsJyYnLHUnwqMnLCcqJyx1J8K/Jyx1J8KhJywnPycsJywnLCchJywnKCcsJyknLCcrJywnPScsJyMnLCcvJywnOicsdSfCsCcsdSfDlycsJ1wnJywnXycsJy0nXQ==",
"TEVUVEVSUyA9IFsnYScsJ2InLCdjJywnZCcsJ2UnLCdmJywnZycsJ2gnLCdpJywnaicsJ2snLCdsJywnbScsJ24nLCfDsScsJ28nLCdwJywncScsJ3InLCdzJywndCcsJ3UnLCd2JywndycsJ3gnLCd5Jywneidd",
"ZGVmIGV6aWMoYXJndW1lbnQpOgoJZnJvbSB0aW1lIGltcG9ydCBzbGVlcAoJZGVmIGxvZ3MobWVuc2FqZXMpOgoJCWZvciBtc2cgaW4gbWVuc2FqZXM6CgkJCXByaW50KG1zZykKCQkJc2xlZXAoMSkgIAoJZGVmIHBhdXNhKCk6CgkJaW5wdXQoJ1ByZXNpb25hIFtFbnRlcl0gcGFyYSBjb250aW51YXIuLi4nKQoJCWZvciBpIGluIHJhbmdlKDUwKTogcHJpbnQoKQoJZGVmIGRlY2lkaXIob3BjaW9uZXMpOgoJCXByaW50KCcnKQoJCWZvciBpLCBvcCBpbiBlbnVtZXJhdGUob3BjaW9uZXMsIHN0YXJ0PTEpOiBwcmludChmJ3tpfS4ge29wfScpCgkJd2hpbGUgVHJ1ZToKCQkJdHJ5OgoJCQkJbnVtZXJvID0gaW50KGlucHV0KCc+IEluZ3Jlc2UgdW5hIG9wY2nDs246ICcpKQoJCQkJaWYgMSA8PSBudW1lcm8gPD0gbGVuKG9wY2lvbmVzKToKCQkJCQlmb3IgaSBpbiByYW5nZSg1MCk6IHByaW50KCkKCQkJCQlyZXR1cm4gbnVtZXJvCgkJCQllbHNlOiBwcmludCgnT3BjacOzbiBpbnbDoWxpZGEuJykKCQkJZXhjZXB0IFZhbHVlRXJyb3I6IHByaW50KCdPcGNpw7NuIGludsOhbGlkYS4nKQoJaWYgYXJndW1lbnQgPT0gJ1l6V2tvdlhOVmJzcCc6CgkJbG9ncyhbJ1RlIHZhcyBhIGRvcm1pci4uLicsJzQgZGUgZGljaWVtYnJlIGRlIDE5ODI6IEVzdMOhcyBlbiB0dSBwdWVzdG8gZGUgdHJhYmFqby4nLCdTZSBhcHJveGltYSBNLiBWb25lbCwgdW4gaW52ZXN0aWdhZG9yIGVzcGVjaWFsIGRlbCBnb2JpZXJuby4nXSkKCQlwYXVzYSgpCgkJbG9ncyhbJ1ZvbmVsOiBCdWVub3MgZMOtYXMsIGluc3BlY3Rvci4nLCdWb25lbDogwr9RdcOpIHRhbCBzZSBlbmN1ZW50cmEgZXN0YSBtYcOxYW5hPyBFc3Blcm8gcXVlIGJpZW4uJywnVm9uZWw6IFRhbiBzb2xvIHF1aWVybyBoYWNlcmxlIHVuYXMgcHJlZ3VudGFzLicsJ1ZvbmVsOiBDcmVlbW9zIHF1ZSB1biBncnVwbyBjbGFuZGVzdGlubyBxdWllcmUgY2F1c2FyIHByb2JsZW1hcy4nLCdWb25lbDogUHVlZGUgcXVlIGFsZ3Vub3MgZGUgc3VzIG1pZW1icm9zIGhheWFuIGVudHJhZG8gcG9yIGVzdGEgYWR1YW5hLicsJ1ZvbmVsOiBBc8OtIHF1ZSBoZW1vcyBjcmVpZG8gcGVydGluZW50ZSBoYWJsYXIgY29uIHVzdGVkLicsJ1ZvbmVsOiDCv0FsZ3VuYSB2ZXogaGEgdmlzdG8gYWxnbyBwYXJlY2lkbyBhIGVzdG8/JywnPiBTZSBsZSBoYWNlIGVudHJlZ2EgZGUgdW4gZGlidWpvLCBjb24gdW5hIGVzdHJlbGxhIGVuIMOpbC4uLiddKQoJCXBhdXNhKCkKCQlsb2dzKFsnVm9uZWw6IFBhcmVjZSBzZXIgZWwgc8OtbWJvbG8gZGUgZ3J1cG8uLi4nLCdWb25lbDogU2kgdGllbmUgaW5mb3JtYWNpw7NuIHNvYnJlIGVsIHRlbWEsIG5vcyBhdmlzYXLDoSwgwr92ZXJkYWQ/JywnVm9uZWw6IMK/VmVyZGFkPycsJ1TDujogU8OtLicsJ1ZvbmVsOiBNdXkgYmllbi4nLCdWb25lbDogU2VhIG11eSBhbWFibGUgZGUgZGV2b2x2ZXJtZSBlbCBwYXBlbGl0by4uLiddKQoJCXJlc3B1ZXN0YSA9IGRlY2lkaXIoWydFbnRyZWdhciBlbCBwYXBlbGl0byBkZSB2dWVsdGEuJywnRW50cmVnYXIgZGlzcXVldGUgeSBjYXJ0YSBkZSBFWklDLiddKQoJCWlmIHJlc3B1ZXN0YSA9PSAxOgoJCQlsb2dzKFsnVm9uZWw6IEVzdGUgZ3J1cG8gZXMgbXV5IHBlbGlncm9zby4nLCdWb25lbDogU2kgdmUgY3VhbHF1aWVyIGFjdGl2aWRhZCBzb3NwZWNob3NhLCByZXDDs3J0ZWxvIGlubWVkaWF0YW1lbnRlLiddKQoJCQlwYXVzYSgpCgkJCWxvZ3MoWydEZWNpZGVzIHF1ZW1hciB0b2RhIGxhIGluZm9ybWFjacOzbiBxdWUgc2UgdGUgZnVlIGVudHJlZ2FkYS4nLCdFc3RvIGluY2x1eWUgdGFudG8gZWwgZGlzcXVldGUsIGNvbW8gbGFzIG5vdGFzLicsJ1BvciBlc3RhIG1pc21hIHJhesOzbiwgaW50ZW50YXMgaWdub3JhciBjdWFscXVpZXIgcmVsYWNpw7NuIGNvbiBsYSBvcmRlbi4nLCdBbCBkw61hIHNpZ3VpZW50ZSwgdGllbmVzIHVuYSBwZXF1ZcOxYSBub3RhIGVuIHR1IG9maWNpbmE6JywnPiBJTlNQRUNUT1IgLSBOT1MgSEEgVFJBSUNJT05BRE8gRU4gRUwgw5pMVElNTyBNT01FTlRPJywnPiBJTVBPU0lCTEUgQ09OVElOVUFSIEFDVElWSURBRCBFWklDIC0gRklOIERFIEVQSVNPRElPIFBBUkEgRVpJQycsJz4gRVpJQyBJTlZFUk5BIERFIE5VRVZPIC0gVU5BIMOaTFRJTUEgVk9MVU5UQUQgU0VSw4EgRUpFQ1VUQURBJ10pCgkJCXBhdXNhKCkKCQkJbG9ncyhbJ1NpZ3VlcyB0dSB0cmFiYWpvIGR1cmFudGUgbGFzIHNpZ3VpZW50ZXMgc2VtYW5hcywgZGUgbWFuZXJhIG5vcm1hbC4nLCdVbiBkw61hLCBzZSByZWFsaXphIHVuIGF0YXF1ZSB0ZXJyb3Jpc3RhIGEgbGEgYWR1YW5hLicsJ1VuIGhvbWJyZSwgY2FyZ2FkbyBjb24gZXhwbG9zaXZvcyBvY3VsdG9zLCBzZSBpbm1vbGEgZW4gZWwgbXVyby4nLCdQcm9kdWN0byBkZSBsYSBleHBsb3Npw7NuLCBmYWxsZWNlcyBlbiBlbCBsdWdhci4nLCdMYSBhZHVhbmEgZXMgY2VycmFkYSBwZXJtYW5lbnRlbWVudGUsIGRhZG8gbG9zIGhlY2hvcyBvY3Vycmlkb3MuJywnR2xvcmlhIGEgQXJ0b3R6a2EuJ10pCgkJCXBhdXNhKCkKCQkJZmluYWwgPSAxCgkJZWxzZToKCQkJbG9ncyhbJ1ZvbmVsOiDCv1F1w6kgZXMgZXN0bz8nLCdWb25lbDogSW50ZXJlc2FudGUuJywnVm9uZWw6IFPDrSwgcmVhbG1lbnRlIGludGVyZXNhbnRlLicsJ1ZvbmVsOiBMbyBtZWpvciBzZXLDoSBxdWUgbWUgYWNvbXBhw7FlLiddKQoJCQlwYXVzYSgpCgkJCWxvZ3MoWydFc3TDoSB1c3RlZCBiYWpvIGFycmVzdG8gcG9yIHByZXN1bnRhIGFmaWxpYWNpw7NuIGEgdW5hIGFzb2NpYWNpw7NuIGNsYW5kZXN0aW5hLicsJ0VsIE1pbmlzdGVyaW8gZGUgSW5mb3JtYWNpw7NuIGxsZXZhcsOhIGEgY2FibyB1bmEgaW52ZXN0aWdhY2nDs24gY29tcGxldGEgZGUgc3VzIGFjdGl2aWRhZGVzIHJlY2llbnRlcy4nLCdTdSBmYW1pbGlhIHRhbWJpw6luIHNlcsOhIHN1Y2VwdGlibGUgZGUgaW50ZXJyb2dhY2nDs24uJywnTGEgYWR1YW5hIHNlZ3VpcsOhIGFiaWVydGEgZ3JhY2lhcyBhIHVuIGluc3BlY3RvciBzdXN0aXR1dG8uJywnR2xvcmlhIGEgQXJ0b3R6a2EuJ10pCgkJCXBhdXNhKCkKCQkJZmluYWwgPSAyCgllbGlmIGFyZ3VtZW50ID09ICdycWFWSXBOSXlUb2snOgoJCWxvZ3MoWydUZSB2YXMgYSBkb3JtaXIuLi4nLCc0IGRlIGRpY2llbWJyZSBkZSAxOTgyOiBGdWlzdGUgbGxhbWFkbyBhIHVuYSBzZXNpw7NuIGRlIGNvbnRyb2wuJywnU2UgYXByb3hpbWEgTS4gVm9uZWwsIHVuIGludmVzdGlnYWRvciBlc3BlY2lhbCBkZWwgZ29iaWVybm8uJ10pCgkJcGF1c2EoKQoJCWxvZ3MoWydWb25lbDogSG9sYSwgaW5zcGVjdG9yLicsJ1ZvbmVsOiBTdSBhY3RpdmlkYWQgcmVjaWVudGUgaGEgc2lkbyBvYmpldG8gZGUgdW5hIGludmVzdGlnYWNpw7NuLicsJ1ZvbmVsOiBIZW1vcyBkZXRlY3RhZG8gY2llcnRhcyBhbm9tYWzDrWFzLicsJ1ZvbmVsOiBTaW4gZW1iYXJnbywgdXN0ZWQgaGEgc2lkbyB1biBmaWVsIHNlcnZpZG9yIGRlIEFydG90emthLicsJ1ZvbmVsOiBQYXNhcmVtb3MgcG9yIGFsdG8gdGFsZXMgdHJhbnNncmVzaW9uZXMuJywnVm9uZWw6IFF1ZWRhIHVzdGVkIGxpYnJlIGRlIHRvZGEgc29zcGVjaGEuJywnVm9uZWw6IEdsb3JpYSBhIEFydG90emthLiddKQoJCXBhdXNhKCkKCQlsb2dzKFsnQWwgZMOtYSBzaWd1aWVudGUsIGxlZXMgZWwgcGVyacOzZGljbzonLCc+IFNlIGhhIGFsY2FuemFkbyB1biBudWV2byBhY3VlcmRvIGNvbiBLb2xlY2hpYS4nLCdMYSBhZHVhbmEgdm9sdmVyw6EgYSBhYnJpciBzdXMgcHVlcnRhcyBlbiBicmV2ZS4nLCdWb2x2ZXLDoSBhbCB0cmFiYWpvIGVsIHByw7N4aW1vIGx1bmVzLiddKQoJCXBhdXNhKCkKCQlmaW5hbCA9IDMKCWVsaWYgYXJndW1lbnQgPT0gJ3BlWGlKZmhVQ1NueCc6CgkJbG9ncyhbJ1Bhc2FuIGxhcyBzZW1hbmFzLi4uJywnQSBmaW4gZGUgbWVzLCBzdWNlZGUgbG8gaW5ldml0YWJsZTogUmVhbGl6YW4gZWwgZ29scGUgY29udHJhIGxhIGFkdWFuYS4nLCdEZWNpZGVzIGF5dWRhciBlbiBlc3RhIG9wZXJhY2nDs24sIGhhY2llbmRvIHF1ZSBFWklDIGN1bXBsYSBzdSBwcm9tZXRpZG8uJywnTHVlZ28gZGUgZXNjYXBhciBkZSB0b2RvIGVsIGNhb3MsIGVyZXMgY29udGFjdGFkbyBwb3IgdW4gYWdlbnRlIGRlIEVaSUMuJ10pCgkJcGF1c2EoKQoJCWxvZ3MoWydFWklDOiDCoUluc3BlY3RvciEgwqFIb3kgZXMgdW4gZMOtYSBnbG9yaW9zbyEnLCdFWklDOiBIZW1vcyBhYmllcnRvIHVuYSBicmVjaGEgZW4gbGEgZnJvbnRlcmEuJywnRVpJQzogRVpJQyBzZSBmb3J0YWxlY2UuIExhIGNvcnJ1cGNpw7NuIHkgbGEgY29kaWNpYSBzZSBkZWJpbGl0YW4nLCdFWklDOiBVc3RlZCB5IHN1IGZhbWlsaWEgc2Vyw6FuIHRyYW5zbGFkYWRvcyBhIHVuIGhvZ2FyIG1lam9yLicsJ0VaSUM6IFN1cyBzZXJ2aWNpb3MgY29tbyBpbnNwZWN0b3IgeWEgbm8gc29uIG5lY2VzYXJpb3MuIE5lY2VzaXRhbW9zIGVzcMOtYXMuJ10pCgkJcGF1c2EoKQoJCWxvZ3MoWyfCoVPDrWdhbm9zIHkgY29uc3VtZW1vcyBlc3RhIHJldm9sdWNpw7NuIScsJ0dsb3JpYSBhIGxhIE51ZXZhIEFydG90emthLicsJ1VuYSBudWV2YSBub3RhIGhhIHNpZG8gY3JlYWRhLi4uJ10pCgkJcGF1c2EoKQoJCWZpbmFsID0gNAoJZWxpZiBhcmd1bWVudCA9PSAnbmNCaVdGQlN4TnRlJzoKCQlsb2dzKFsnUGFzYW4gbGFzIHNlbWFuYXMuLi4nLCdBIGZpbiBkZSBtZXMsIHN1Y2VkZSBsbyBpbmV2aXRhYmxlOiBSZWFsaXphbiBlbCBnb2xwZSBjb250cmEgbGEgYWR1YW5hLicsJ0RlY2lkZXMgbm8gYWN0dWFyLiBMb3MgZ3VhcmRpYXMgc29uIGNhcGFjZXMgZGUgZGV0ZW5lciBlbCBnb2xwZS4nLCdEZWNpZGVzIGVzY2FwYXIgZGUgdG9kbyBlbCBjYW9zLCBwYXJhIGNvbXByb2JhciBxdWUgdHUgZmFtaWxpYSBlc3TDqSBiaWVuLicsJ0FsIGTDrWEgc2lndWllbnRlLCBmdWlzdGUgbGxhbWFkbyBhIHVuYSBzZXNpw7NuIGRlIGNvbnRyb2wnLCdTZSBhcHJveGltYSBNLiBWb25lbCwgdW4gaW52ZXN0aWdhZG9yIGVzcGVjaWFsIGRlbCBnb2JpZXJuby4nXSkKCQlwYXVzYSgpCgkJbG9ncyhbJ1ZvbmVsOiBIb2xhLCBpbnNwZWN0b3IuJywnVm9uZWw6IFN1IGFjdGl2aWRhZCByZWNpZW50ZSBhIHNpZG8gb2JqZXRvIGRlIHVuYSBpbnZlc3RpZ2FjacOzbi4nLCdWb25lbDogU3UgaW1wbGljYWNpw7NuIGNvbiBlbCBncnVwbyBhdXRvZGVub21pbmFkbyA8PExBIE9SREVOIERFIExBIEVTVFJFTExBIERFIEVaSUM+PiBoYSBzaWRvIHB1ZXN0YSBlbiBldmlkZW5jaWEuJywnVm9uZWw6IE11Y2hvcyBkZSBzdXMgbWllbWJyb3MgaGFuIHNpZG8gYXJyZXN0YWRvcyBlbiBBcnRvdHprYSwgZW50cmUgZWxsb3MsIENvcm1hbiBEcmV4LicsJ1ZvbmVsOiBRdWllbiBoYSBjb25mZXNhZG8gaGFiZXIgdGVuaWRvIHVuYSByZWxhY2nDs24gY29uIHVzdGVkLicsJ1ZvbmVsOiBUYWwgaW1wbGljYWNpw7NuIGNvbnN0aXR1eWUgdW4gZGVsaXRvIGRlIGFsdGEgdHJhaWNpw7NuLicsJ1ZvbmVsOiBBZGlvcywgaW5zcGVjdG9yLiddKQoJCXBhdXNhKCkKCQlsb2dzKFsnRXN0w6EgdXN0ZWQgYmFqbyBhcnJlc3RvIHBvciBkZWxpdG9zIGRlIGFsdGEgdHJhaWNpw7NuIGEgQXJ0b3R6a2EuJywnVGFsIGNyaW1lbiBlc3TDoSBzYW5jaW9uYWRvIGNvbiBsYSBwZW5hIGRlIG11ZXJ0ZS4nLCdTdSBlamVjdWNpw7NuIHRlbmRyw6EgbHVnYXIgZXN0YSBtaXNtYSBub2NoZS4nLCdJZ25vcmFtb3Mgc2kgc3UgZmFtaWxpYSBlc3TDoSBhIHNhbHZvLicsJ0VaSUMgaGEgc2lkbyBhbmlxdWlsYWRhLiBMYSBiYWxhbnphIGRlIGxhIGp1c3RpY2lhIGhhIHNpZG8gcmVzdGl0dWlkYS4nLCdHbG9yaWEgYSBBcnRvdHprYS4nXSkKCQlwYXVzYSgpCgkJbG9ncyhbJ0FsZ3VpZW4gcGFzYSB1bmEgbm90YSBkZWJham8gZGUgbGEgcHVlcnRhIGRlIGxhIGNlbGRhOicsJz4gSU5TUEVDVE9SIC0gTk9TIEhBIFRSQUlDSU9OQURPIEVOIEVMIMOaTFRJTU8gTU9NRU5UTycsJz4gRklOIERFIEVQSVNPRElPIFBBUkEgRVpJQyAtIE5PIE3DgVMgQVlVREFTIEEgU1UgRkFNSUxJQSddKQoJCXBhdXNhKCkKCQlmaW5hbCA9IDUKCWVsc2U6IHJldHVybiBwcmludCgnTGEgb3JkZW4gZXNwZXJhLi4uJykKCXByaW50KGYnRmluYWwge2ZpbmFsfSBkZSA1LicpCglpZiBmaW5hbCA9PSA0OgoJCXdpdGggb3BlbignZ2xvcmlhX2FfbGFfbnVldmFfYXJ0b3R6a2EudHh0JywgJ3cnLCBlbmNvZGluZz0ndXRmLTgnKSBhcyBhcmNoOiBhcmNoLndyaXRlKHInXH4mXFxcfihcfsKhXH5AXH4sXH5+XFwgXH7Co1x+LFx+I1x+KVx+w7dcfnxcfi9cfihcfj1cfi5cfn5cXCBcfsK/XH5+XFxcfnxcXFx+w7Ncfn5cXFx+P1x+KCBcfsKwXH5AIFx+wqFcfkAgXH7CsFx+wqNcfiRcfkAgXH4kXH7DtyBcfsO3XH4jXH4pXH7DrVx+flxcXH5AXH4/XH5+XFwgXH7Dt1xcXH4jXH4pXH7Dt1x+PVx+KCBcfitcfjpcfsO3IFx+wrBcfkBcfl9cfkAgXH47XH7Co1x+w7dcfixcfi5cfn5cXCBcfiNcXFx+wqMgXH7Dt1x+I1x+L1x+w6Fcfn5cXFx+IyBcfsKhXH7Dt1x+X1x+w7dcfixcfiRcfiggXH7Dt1x+I1x+L1x+w7cgXH4/XH7Dt1x+LFx+I1x+QFx+Klx+w7dcfixcfn5cXCBcfitcfjpcfsKjXH7Dt1x+PVx+w7cgXH4kXH7Dt1x+fFx+wqNcfj0gXH4rXH46XH7DtyBcfi9cfsO3IFx+Jlx+QFx+IyBcfiRcfkBcfiRcfiggXH7Dt1x+wqEgXH4vXH7Co1x+w7dcfj9cfilcfiggXH4kXH7DtyBcfiRcfsO3XH4jXH58XH46XH47XH49XH7Co1x+PSBcfnxcfihcfj9cfiggXH7CoVx+w7dcfsO3XH49XH7CoVx+KFx+LFx+flxcIFx+wr9cfn5cXFx+LFx+KFx+P1x+flxcIFx+O1xcXH46XH7Dt1x+LFx+KFx+LFx+flxcIFx+I1x+wqMgXH4mXH5AXH4jIFx+wqFcfsKhXH7Dt1x+Xlx+QFx+JFx+KCBcfiZcfkBcfiNcfi9cfkAgXH7Dt1x+I1x+L1x+w7cgXH4pXH46XH4sXH4vXH4oXH4sXH5+XFwgXH4rXH46XH7Co1x+w7dcfj1cfsO3IFx+JFx+w7dcfnxcfsKjXH49IFx+K1x+Olx+w7cgXH7Dt1x+PVx+w7dcfiMgXH7CoVx+KCBcfiNcfjpcfiVcfsKjXH58XH7Co1x+w7dcfixcfi9cfsO3XH4/XH7Dt1x+LFx+L1x+w7cgXH58XH46XH49XH7Co1x+KFx+I1x+KCBcfnxcfihcfj9cfiggXH4pXH5AXH49XH5AIFx+K1x+Olx+w7dcfj1cfsO3XH49IFx+JFx+w7dcfiNcfnxcfjpcfjtcfj1cfsKjXH49IFx+L1x+KFx+JFx+KFx+IyBcfsKhXH4oXH4jIFx+I1x+w7dcfnxcfj1cfsO3XH4vXH4oXH4jIFx+JFx+w7cgXH7Dt1x+I1x+L1x+QCBcfkBcfl9cfjpcfiRcfkBcfixcfi9cfsOtXH5+XFxcfkBcfi5cfn5cXCBcfsKhXFxcfkBcfj9cfsO3XH4sXH4vXH5AXH47XH7CoVx+w7dcfj9cfsO3XH4sXH4vXH7Dt1x+LFx+flxcIFx+LFx+KCBcfiZcfkBcfl8gXH4/XH7DoVx+flxcXH4jIFx+I1x+w7dcfnxcfj1cfsO3XH4vXH4oXH4jXH4uXH5+XFwgXH4vXFxcfihcfiRcfiggXH4vXH7Co1x+w7dcfixcfsO3IFx+Olx+LCBcfiVcfsKjXH4sXH4uXH5+XFwgXH7Dt1xcXH4jIFx+KVx+PVx+KFx+O1x+QFx+O1x+wqFcfsO3IFx+K1x+Olx+w7cgXH4rXH46XH7Co1x+w7dcfj1cfkBcfiMgXH4kXH7Dt1x+I1x+w7dcfixcfi9cfj1cfkBcfiFcfkBcfj0gXH7CoVx+KFx+IyBcfiNcfsO3XH58XH49XH7Dt1x+L1x+KFx+IyBcfiRcfsO3XH7CoSBcfkBcfj1cfnxcfiZcfsKjXH7CsFx+KCBcfiRcfsO3XH58XH4oXH4kXH7Co1x+JVx+wqNcfnxcfkBcfiRcfihcfj1cfsO3XH4jXH5fXH5+XFxcfsO3XH4tXH7Co1x+fFx+Llx+flxcXH4pXH5fXH4sXH5+XFwgXH5AXH4kXH7Dt1x+wqFcfkBcfixcfi9cfsO3XH4sXH5+XFwgXH7Dt1x+PVx+w7dcfiMgXH7CoVx+wqNcfjtcfj1cfsO3IFx+JFx+w7cgXH4mXH5AXH58XH7Dt1x+PVx+wqFcfihcfixcfn5cXCBcfkBcfitcfjpcfsOtXH5+XFwgXH46XH4sIFx+JFx+QFx+L1x+KCBcfnxcfjpcfj1cfsKjXH4oXH4jXH4oXH46XH5+XFwgXH7Dt1xcXH4jXH5AIFx+JVx+Olx+LFx+fFx+wqNcfsOzXH5+XFxcfiwgXH4kXH7DtyBcfiRcfsO3XH4jXH7Dt1x+LFx+fFx+PVx+wqNcfilcfi9cfkBcfj0gXH4lXH46XH7DtyBcfnxcfj1cfsO3XH5AXH4kXH4oIFx+Jlx+QFx+fFx+w7cgXH4/XH7DoVx+flxcXH4jIFx+JFx+w7cgXH40XH5+XFwgXH5AXH4hXH4oXH4jXH4uXH5+XFwgXH4jXFxcfsOtXH5+XFxcfixcfn5cXCBcfiZcfkBcfnxcfsO3IFx+O1x+QFx+I1x+L1x+QFx+LFx+L1x+w7cgXH4vXH7Co1x+w7dcfj9cfilcfihcfixcfn5cXCBcfsK/XH5+XFxcfixcfihcfj9cfn5cXCBcfjtcXFx+Olx+w7dcfixcfihcfixcfn5cXCBcfkBcfiZcfihcfj1cfkAgXH4rXH46XH7DtyBcfiZcfkBcfiMgXH7CoVx+wqFcfsO3XH5eXH5AXH4kXH4oIFx+Jlx+QFx+I1x+L1x+QCBcfkBcfitcfjpcfsOtXH5+XFxcfixcfn5cXCBcfj1cfsO3XH58XH46XH7Dt1x+PVx+JFx+QCBcfiRcfkBcfj1cfsKhXH7DtyBcfjpcfiwgXH4jXH5AXH7CoVx+Olx+JFx+KCBcfkAgXH58XFxcfsOpXH5+XFxcfiNcfkBcfj1cfixcfn5cXCBcfiNcfsKjXH7Dt1x+P1x+KVx+PVx+w7cgXH7Dt1x+IyBcfsKjXH4sXH4vXH7Dt1x+PVx+w7dcfiNcfkBcfixcfi9cfsO3IFx+I1x+QFx+O1x+w7dcfj0gXH58XH46XH7DoVx+flxcXH4sXH4vXH5AIFx+Xlx+w7dcfixcfi9cfsO3IFx+wqFcfsO3XH7Dt1x+PVx+w6Fcfn5cXCBcfsO3XH4jXH4vXH4oXH4uXH5+XFwnKQ=="
]: exec(base64.b64decode(i).decode("utf-8"))